name: Build and Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  actions: read

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Prepare build metadata
      shell: bash
      run: node prepare.mjs ${{ github.run_number }}

    - name: Build Windows executable
      run: pnpm run build:nsis
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        APP_VERSION: 0.0.0-alpha.${{ github.run_number }}

    # list the files in the release directory recursively
    - name: List files in release directory
      shell: powershell
      run: |
        Get-ChildItem -Path "release\" -Recurse -Force
        Get-ChildItem -Path "dist\" -Recurse -Force

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aqua-player-windows
        path: |
          release/Aqua-Player-*.exe
          release/latest.yml
          release/*.blockmap
        retention-days: 30

  build-macos:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Typecheck
      run: pnpm typecheck

    - name: Prepare build metadata
      shell: bash
      run: node prepare.mjs ${{ github.run_number }}

    - name: Build macOS DMG
      run: pnpm run build:dmg
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        APP_VERSION: 0.0.0-alpha.${{ github.run_number }}

    # list the files in the release directory recursively
    - name: List files in release directory
      shell: bash
      run: |
        ls -la release/
        ls -la dist/

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aqua-player-macos
        path: |
          release/*.dmg
          release/latest-mac.yml
          release/*.blockmap
        retention-days: 30

  release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: aqua-player-windows
        path: ./release-artifacts/windows/

    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: aqua-player-macos
        path: ./release-artifacts/macos/

    - name: List artifacts
      run: |
        echo "=== Release artifacts ==="
        ls -la ./release-artifacts/
        echo "=== Windows artifacts ==="
        ls -la ./release-artifacts/windows/
        echo "=== macOS artifacts ==="
        ls -la ./release-artifacts/macos/
        echo "=== Finding exact filenames ==="
        WIN_FILE=$(find ./release-artifacts/windows/ -name "*.exe" -type f | head -n 1)
        WIN_LATEST=$(find ./release-artifacts/windows/ -name "latest.yml" -type f | head -n 1)
        MAC_FILE=$(find ./release-artifacts/macos/ -name "*.dmg" -type f | head -n 1)
        MAC_LATEST=$(find ./release-artifacts/macos/ -name "latest-mac.yml" -type f | head -n 1)
        echo "WIN_FILE=${WIN_FILE}" >> $GITHUB_ENV
        echo "WIN_LATEST=${WIN_LATEST}" >> $GITHUB_ENV
        echo "MAC_FILE=${MAC_FILE}" >> $GITHUB_ENV
        echo "MAC_LATEST=${MAC_LATEST}" >> $GITHUB_ENV
        echo "Windows file: ${WIN_FILE}"
        echo "Windows latest: ${WIN_LATEST}"
        echo "macOS file: ${MAC_FILE}"
        echo "macOS latest: ${MAC_LATEST}"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v0.0.0-alpha.${{ github.run_number }}
        release_name: Dev Build ${{ github.run_number }}
        body: |
          üåä **Aqua Player**

          A modern, feature-rich video player built with Electron.

          **Features:**
          - üé• Local video file playback
          - üñ±Ô∏è Drag & drop support
          - üéõÔ∏è Custom protocol for secure file loading
          - üé® Modern UI with auto-hide controls
          - üì± Platform-specific window controls
          - üéØ Customizable accent colors
          - üîÑ Automatic updates

          **Downloads:**
          - Windows: See attached assets
          - macOS: See attached assets

          **Installation:**
          - Download the appropriate file for your platform and run the installer.
          - On macOS run `xattr -cr "/Applications/Aqua Player.app"` to fix "This app is damaged and can't be opened. You should move it to the Bin." error.

          **Usage:**
          - Drag and drop video files onto the player
          - Use the folder button to browse for files
          - Press Space to toggle play/pause
          - Press Backspace to hide UI
          - Mouse movement shows/hides controls automatically
        draft: false
        prerelease: false

    - name: Upload Windows Setup
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.WIN_FILE }}
        asset_name: Aqua-Player-Setup-0.0.0-alpha.${{ github.run_number }}.exe
        asset_content_type: application/octet-stream

    - name: Upload Windows Setup Blockmap
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.WIN_FILE }}.blockmap
        asset_name: Aqua-Player-Setup-0.0.0-alpha.${{ github.run_number }}.exe.blockmap
        asset_content_type: application/octet-stream

    - name: Upload Windows Latest YML
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.WIN_LATEST }}
        asset_name: latest.yml
        asset_content_type: application/x-yaml

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.MAC_FILE }}
        asset_name: Aqua-Player-0.0.0-alpha.${{ github.run_number }}.dmg
        asset_content_type: application/octet-stream

    - name: Upload macOS Latest YML
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.MAC_LATEST }}
        asset_name: latest-mac.yml
        asset_content_type: application/x-yaml
