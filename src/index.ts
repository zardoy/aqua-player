import { app, BrowserWindow, protocol, net, nativeImage, ipcMain } from 'electron';
import * as path from 'path';
import * as fs from 'fs';
import { pathToFileURL } from 'url';
import { setupIpcHandlers } from './ipcHandlers';
import { loadSettingsFromDisk } from './ipcHandlers/settingsHandlers';
import { setupWindowsFileAssociations } from './ipcHandlers/fileAssociationHandler';
import WindowKeeper from 'electron-window-keeper'
import { updateElectronApp, UpdateSourceType } from 'update-electron-app';
import electronLog from 'electron-log';

updateElectronApp({
  updateSource: {
    type: UpdateSourceType.ElectronPublicUpdateService,
    repo: 'zardoy/aqua-player'
  },
  updateInterval: '1 hour',
  logger: electronLog,
  notifyUser: false,
});

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow | null = null;

// Ensure single instance to handle file open events
// const gotLock = app.requestSingleInstanceLock();
// if (!gotLock) {
//   app.quit();
// }

app.on('second-instance', (_event, argv) => {
  if (!mainWindow) return;
  if (mainWindow.isMinimized()) mainWindow.restore();
  mainWindow.focus();

  // Only send the file path if it exists and looks like a valid path
  const filePath = argv[1];
  if (filePath && (filePath.includes('/') || filePath.includes('\\'))) {
    mainWindow.webContents.send('open-file', filePath);
  }
});

// macOS open-file handler
app.on('open-file', (event, filePath) => {
  event.preventDefault();
  if (mainWindow) {
    mainWindow.webContents.send('open-file', filePath);
  }
});

const createWindow = (): void => {
  const windowState = new WindowKeeper();

  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 720,
    width: 1280,
    minWidth: 640,
    minHeight: 480,
    ...windowState.restoredFullState,
    fullscreen: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,
      contextIsolation: true,
      webSecurity: false,
    },
    backgroundColor: '#121212',
    frame: false, // Make window borderless
    titleBarStyle: 'hidden',
    titleBarOverlay: {
      color: 'rgba(0, 0, 0, 0)',
      symbolColor: '#ffffff',
      height: 30,
    },
    // dark theme
    darkTheme: true,
  });

  windowState.manage(mainWindow);



  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Set CSP to allow our custom protocol and development tools
  mainWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [
          "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: local-file: file: ws: wss:; " +
          "media-src 'self' data: local-file: file: blob: https://filesamples.com; " +
          "script-src 'self' 'unsafe-inline' 'unsafe-eval' ws: wss:; " +
          "connect-src 'self' ws: wss:;"
        ]
      }
    });
  });


  // Open the DevTools in development mode
  if (process.env.NODE_ENV === 'development') {
    mainWindow.webContents.openDevTools();
  }

  // Set up IPC handlers for file operations
  initializeIpcHandlers();

  // Set up Windows thumbnail toolbar
  if (process.platform === 'win32') {
    const thumbnailToolbar = {
      buttons: [
        {
          tooltip: 'Previous',
          icon: nativeImage.createFromPath(path.join(app.getAppPath(), 'assets/thumbnail_control/prev.png')),
          click: () => mainWindow?.webContents.send('thumbnail-control', 'prev')
        },
        {
          tooltip: 'Play/Pause',
          icon: nativeImage.createFromPath(path.join(app.getAppPath(), 'assets/thumbnail_control/play.png')),
          click: () => mainWindow?.webContents.send('thumbnail-control', 'playpause')
        },
        {
          tooltip: 'Next',
          icon: nativeImage.createFromPath(path.join(app.getAppPath(), 'assets/thumbnail_control/next.png')),
          click: () => mainWindow?.webContents.send('thumbnail-control', 'next')
        },
        // {
        //   tooltip: 'Toggle Fullscreen',
        //   icon: nativeImage.createFromPath(path.join(app.getAppPath(), 'assets/thumbnail_control/fullscreen.png')),
        //   click: () => mainWindow?.webContents.send('thumbnail-control', 'fullscreen')
        // }
      ]
    };

    mainWindow.setThumbarButtons(thumbnailToolbar.buttons);

    // Update play/pause button based on playback state
    ipcMain.on('update-progress-bar', (_event, { isPlaying }) => {
      if (!mainWindow || process.platform !== 'win32') return;

      const buttons = [...thumbnailToolbar.buttons];
      buttons[1].icon = nativeImage.createFromPath(path.join(
        app.getAppPath(),
        `assets/thumbnail_control/${isPlaying ? 'pause' : 'play'}.png`
      ));
      mainWindow.setThumbarButtons(buttons);
    });
  }
};

// Set up IPC handlers for communication between renderer and main process
const initializeIpcHandlers = () => {
  setupIpcHandlers(mainWindow!);
};



// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(async () => {
  // Load settings first
  const settings = await loadSettingsFromDisk();

  // Set up file associations based on settings
  await setupWindowsFileAssociations(settings);

  // Handle custom protocol for local files
  protocol.handle('local-file', (req) => {
    let filePath = req.url.replace('local-file://', '');
    if (process.platform !== 'win32' && !filePath.startsWith('/')) filePath = `/${filePath}`;

    // Check if file exists
    if (fs.existsSync(filePath)) {
      return net.fetch(pathToFileURL(filePath).toString());
    } else {
      return new Response('File not found', {
        status: 404,
        headers: { 'content-type': 'text/plain' }
      });
    }
  });

  createWindow();
});

// Listen for settings changes
ipcMain.on('settings-updated', async (_event, settings) => {
  // Update file associations when settings change
  await setupWindowsFileAssociations(settings);
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  app.quit();
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
